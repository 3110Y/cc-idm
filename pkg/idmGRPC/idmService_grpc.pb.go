// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: idmService.proto

package idmGRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDMServiceClient is the client API for IDMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDMServiceClient interface {
	FromLoginAndPassword(ctx context.Context, in *ProfileEmailPhonePassword, opts ...grpc.CallOption) (*AccessAndRefresh, error)
	FromRefresh(ctx context.Context, in *Refresh, opts ...grpc.CallOption) (*AccessAndRefresh, error)
	IsValidAccess(ctx context.Context, in *Access, opts ...grpc.CallOption) (*EmptyResponse, error)
	IsValidRefresh(ctx context.Context, in *Refresh, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type iDMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIDMServiceClient(cc grpc.ClientConnInterface) IDMServiceClient {
	return &iDMServiceClient{cc}
}

func (c *iDMServiceClient) FromLoginAndPassword(ctx context.Context, in *ProfileEmailPhonePassword, opts ...grpc.CallOption) (*AccessAndRefresh, error) {
	out := new(AccessAndRefresh)
	err := c.cc.Invoke(ctx, "/idmService.IDMService/FromLoginAndPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMServiceClient) FromRefresh(ctx context.Context, in *Refresh, opts ...grpc.CallOption) (*AccessAndRefresh, error) {
	out := new(AccessAndRefresh)
	err := c.cc.Invoke(ctx, "/idmService.IDMService/FromRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMServiceClient) IsValidAccess(ctx context.Context, in *Access, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/idmService.IDMService/IsValidAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMServiceClient) IsValidRefresh(ctx context.Context, in *Refresh, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/idmService.IDMService/IsValidRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDMServiceServer is the server API for IDMService service.
// All implementations must embed UnimplementedIDMServiceServer
// for forward compatibility
type IDMServiceServer interface {
	FromLoginAndPassword(context.Context, *ProfileEmailPhonePassword) (*AccessAndRefresh, error)
	FromRefresh(context.Context, *Refresh) (*AccessAndRefresh, error)
	IsValidAccess(context.Context, *Access) (*EmptyResponse, error)
	IsValidRefresh(context.Context, *Refresh) (*EmptyResponse, error)
	mustEmbedUnimplementedIDMServiceServer()
}

// UnimplementedIDMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIDMServiceServer struct {
}

func (UnimplementedIDMServiceServer) FromLoginAndPassword(context.Context, *ProfileEmailPhonePassword) (*AccessAndRefresh, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromLoginAndPassword not implemented")
}
func (UnimplementedIDMServiceServer) FromRefresh(context.Context, *Refresh) (*AccessAndRefresh, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromRefresh not implemented")
}
func (UnimplementedIDMServiceServer) IsValidAccess(context.Context, *Access) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidAccess not implemented")
}
func (UnimplementedIDMServiceServer) IsValidRefresh(context.Context, *Refresh) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidRefresh not implemented")
}
func (UnimplementedIDMServiceServer) mustEmbedUnimplementedIDMServiceServer() {}

// UnsafeIDMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDMServiceServer will
// result in compilation errors.
type UnsafeIDMServiceServer interface {
	mustEmbedUnimplementedIDMServiceServer()
}

func RegisterIDMServiceServer(s grpc.ServiceRegistrar, srv IDMServiceServer) {
	s.RegisterService(&IDMService_ServiceDesc, srv)
}

func _IDMService_FromLoginAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileEmailPhonePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServiceServer).FromLoginAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmService.IDMService/FromLoginAndPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServiceServer).FromLoginAndPassword(ctx, req.(*ProfileEmailPhonePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMService_FromRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refresh)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServiceServer).FromRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmService.IDMService/FromRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServiceServer).FromRefresh(ctx, req.(*Refresh))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMService_IsValidAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Access)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServiceServer).IsValidAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmService.IDMService/IsValidAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServiceServer).IsValidAccess(ctx, req.(*Access))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMService_IsValidRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Refresh)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServiceServer).IsValidRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idmService.IDMService/IsValidRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServiceServer).IsValidRefresh(ctx, req.(*Refresh))
	}
	return interceptor(ctx, in, info, handler)
}

// IDMService_ServiceDesc is the grpc.ServiceDesc for IDMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idmService.IDMService",
	HandlerType: (*IDMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FromLoginAndPassword",
			Handler:    _IDMService_FromLoginAndPassword_Handler,
		},
		{
			MethodName: "FromRefresh",
			Handler:    _IDMService_FromRefresh_Handler,
		},
		{
			MethodName: "IsValidAccess",
			Handler:    _IDMService_IsValidAccess_Handler,
		},
		{
			MethodName: "IsValidRefresh",
			Handler:    _IDMService_IsValidRefresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idmService.proto",
}
