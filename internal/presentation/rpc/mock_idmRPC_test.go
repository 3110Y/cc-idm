// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/3110Y/cc-idm/internal/presentation/rpc (interfaces: JWTServiceInterface)

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	dto "github.com/3110Y/cc-idm/internal/application/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockJWTServiceInterface is a mock of JWTServiceInterface interface.
type MockJWTServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTServiceInterfaceMockRecorder
}

// MockJWTServiceInterfaceMockRecorder is the mock recorder for MockJWTServiceInterface.
type MockJWTServiceInterfaceMockRecorder struct {
	mock *MockJWTServiceInterface
}

// NewMockJWTServiceInterface creates a new mock instance.
func NewMockJWTServiceInterface(ctrl *gomock.Controller) *MockJWTServiceInterface {
	mock := &MockJWTServiceInterface{ctrl: ctrl}
	mock.recorder = &MockJWTServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTServiceInterface) EXPECT() *MockJWTServiceInterfaceMockRecorder {
	return m.recorder
}

// FromLoginAndPassword mocks base method.
func (m *MockJWTServiceInterface) FromLoginAndPassword(arg0 context.Context, arg1 string, arg2 uint64, arg3 string) (*dto.JWTDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromLoginAndPassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dto.JWTDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromLoginAndPassword indicates an expected call of FromLoginAndPassword.
func (mr *MockJWTServiceInterfaceMockRecorder) FromLoginAndPassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromLoginAndPassword", reflect.TypeOf((*MockJWTServiceInterface)(nil).FromLoginAndPassword), arg0, arg1, arg2, arg3)
}

// FromRefresh mocks base method.
func (m *MockJWTServiceInterface) FromRefresh(arg0 string) (*dto.JWTDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRefresh", arg0)
	ret0, _ := ret[0].(*dto.JWTDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRefresh indicates an expected call of FromRefresh.
func (mr *MockJWTServiceInterfaceMockRecorder) FromRefresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRefresh", reflect.TypeOf((*MockJWTServiceInterface)(nil).FromRefresh), arg0)
}

// IsValidAccess mocks base method.
func (m *MockJWTServiceInterface) IsValidAccess(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidAccess", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidAccess indicates an expected call of IsValidAccess.
func (mr *MockJWTServiceInterfaceMockRecorder) IsValidAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidAccess", reflect.TypeOf((*MockJWTServiceInterface)(nil).IsValidAccess), arg0)
}

// IsValidRefresh mocks base method.
func (m *MockJWTServiceInterface) IsValidRefresh(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidRefresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidRefresh indicates an expected call of IsValidRefresh.
func (mr *MockJWTServiceInterfaceMockRecorder) IsValidRefresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidRefresh", reflect.TypeOf((*MockJWTServiceInterface)(nil).IsValidRefresh), arg0)
}
